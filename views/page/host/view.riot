<page-host-view>
  <div class="row">
    <div class="col chat-column mb-4 mb-lg-0">
      <div class="card">
        <div class="card-body drag-elements">
          <div each={ (type, i) in state.types } class="drag-element-main">
            <div class="card bg-white mb-2" onclick={ (e) => onExpand(e, type.title) }>
              <div class="card-body d-flex align-items-center">
                { type.title }
                <button class="ml-auto btn btn-sm btn-info">
                  { type.count }
                </button>
              </div>
            </div>
            <div if={ state.expanded && state.expanded[type.title] } class="template-elements">
              <div if={ !getTemplates(type.title).length } class="text-center p-3">
                <i class="fa fa-spinner fa-spin" />
              </div>
              <div each={ (tmpl, a) in getTemplates(type.title) } class="card mb-2" data-template={ tmpl.get('_id') }>
                { tmpl.get('title') }
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col">
      <div class="container">
        <div class="host-website rounded">
          <div class="w-100 block-body d-flex">
            <div class="block-overlay w-75 mx-auto">
              <a each={ (block, i) in getBlocks() } href="#!" style={ getPosition(block, i) } onclick={ (e) => onBlock(e, block) } data-id={ block.id } class="block-wrapper d-block" />
            </div>
            <div if={ !getBlocks().length } class="py-5" />
            <div if={ state.block } class="w-100 m-0 border-none shadow block-frame rounded bg-white" style={ getBlockPosition(state.block) }>
              <iframe ref="block" frameborder="0" class="d-block w-100" />
              <div class="block-hover pb-3">
                <div class="btn-group mr-2">
                  <button class="btn btn-sm btn-info">
                    { state.block.title || state.block.id }
                  </button>
                </div>
                <div class="btn-group mr-2">
                  <button class={ `btn btn-sm btn-primary${state.block.order ? '' : ' disabled'}` } onclick={ (e) => onMove(e, -1) } data-toggle="tooltip" title="Move Up">
                    <i class="fa fa-chevron-up" />
                  </button>
                  <button class={ `btn btn-sm btn-primary${state.block.order === getBlocks().length - 1 ? ' disabled' : ''}` } onclick={ (e) => onMove(e, 1) } data-toggle="tooltip" title="Move Down">
                    <i class="fa fa-chevron-down" />
                  </button>
                  <button class="btn btn-sm btn-primary" data-toggle="tooltip" title="Remove Block" onclick={ (e) => onRemove(e, state.block) }>
                    <i class="fa fa-times" />
                  </button>
                </div>
                <button class="btn btn-sm btn-secondary" onclick={ (e) => onBlock(e) }>
                  <i class="fa fa-times" />
                </button>
              </div>
            </div>
            <div class="website-frame w-100 rounded bg-white">
              <iframe if={ getBlocks().length } class={ `w-100 m-0 border-none${state.block ? ' op-50' : ''}` } ref="website" frameborder="0" />
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="col chat-column mb-4 mb-lg-0">
      <div class="card">
        <div class="card-body">
          <div class="card drag-field bg-white" field="custom">
            <div class="card-body">
              <i class="fa fa-function mr-2" />
              Custom
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <div if={ state.removing } class="modal fade" id="column-remove">
    <div class="modal-dialog">
      <div class="modal-content">

        <!-- Modal Header -->
        <div class="modal-header">
          <h5 class="modal-title">
            Removing <b>{ state.removing.title || state.removing.id }</b>
          </h5>
          <button type="button" class="btn-close" data-dismiss="modal">&times;</button>
        </div>

        <!-- Modal body -->
        <div class="modal-body">
          Are you sure you want to remove this block?
        </div>

        <!-- Modal footer -->
        <div class="modal-footer">
          <button type="button" class="btn btn-info mr-auto" data-dismiss="modal">
            Close
          </button>
          <button type="button" class="btn btn-danger" onclick={ (e) => onCompleteRemove(e, state.removing) }>
            Confirm
          </button>
        </div>

      </div>
    </div>
  </div>


  <script>
    // sortable
    import Sortable from 'sortablejs';
    import { v4 as uuid } from 'uuid';

    // export default
    export default class PageHostView {

      /**
       * on mounted
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // bind methods
        this.onChild = this.onChild.bind(this);
        this.onBlock = this.onBlock.bind(this);
        this.onExpand = this.onExpand.bind(this);
        this.getPosition = this.getPosition.bind(this);
        this.getBlockPosition = this.getBlockPosition.bind(this);

        // set caches
        this.riot = {};

        // set page to null
        this.state.page = '/';

        // init
        this.init();
      }

      /**
       * on mounted
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // set height
        if (this.$(`[ref="block"]`)) {
          $(this.$(`[ref="block"]`)).height($(this.$(`[ref="block"]`)).contents().find('html').prop('scrollHeight'));
        }
        $(this.$(`[ref="website"]`)).height($(this.$(`[ref="website"]`)).contents().find('html').prop('scrollHeight'));

        // init
        this.initSort();
      }

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.type;
        delete newProps.item;
        delete newProps.view;
        delete newProps.class;
        delete newProps.struct;

        // return
        return newProps;
      }

      /**
       * return zoom
       */
      getZoom() {
        // return zoom
        return .75;
      }

      /**
       * get blocks
       */
      getBlocks() {
        // get blocks
        return ((((this.state.data || {}).routes || {})[this.state.page] || {}).blocks || []).filter((b) => b).sort((a, b) => {
          // sort
          if (a.order > b.order) return 1;
          if (a.order < b.order) return -1;
          return 0;
        }).map((block, i) => {
          // find block
          return {
            ...(this.state.data.blocks[block.id]),
            order : i,
          };
        });
      }

      /**
       * get templates
       */
      getTemplates(type) {
        // return filtered
        return [...(this.state.templates || [])].filter((template) => {
          // return found category
          return (template.get('category') || []).includes(type);
        });
      }

      /**
       * get position
       */
      getPosition(block, i) {
        // internal block
        const internalBlock = $(`[ref="website"]`).contents().find('[is]')[i];

        // nothing
        if (!internalBlock) return '';

        // get size
        const height = $(internalBlock).outerHeight() * this.getZoom();
        
        // height
        return `height:${height}px`;
      }

      /**
       * get block position
       */
      getBlockPosition(block) {
        // get index
        const overlay = this.$(`[data-id="${block.id}"]`);

        // get rect
        let { height, top } = overlay.getBoundingClientRect();
        const offsetTop = this.$('.block-overlay').getBoundingClientRect().top;

        // real height
        const realHeight = (height / (this.getZoom() * 100)) * 100;
        const offsetHeight = realHeight - height;

        // fix top
        top = top - offsetTop - (offsetHeight / 2);
        
        // check
        if (top < 0) top = 0;

        // rect
        return `position : absolute; top : ${top}px; min-height : ${realHeight}px;`;
      }

      /**
       * on expand
       */
      onExpand(e, type) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // expanded
        this.update({
          expanded : {
            ...(this.state.expanded || {}),

            [type] : !(this.state.expanded || {})[type],
          },
        });

        // load templates
        if (this.state.expanded[type]) {
          // find
          this.props.guest.page('603f1c11e478ae000fe1e1e5').where({
            category : type,
          }).find().then((found) => {
            // create set
            const templates = [...(this.state.templates || []), ...found].reduce((accum, template) => {
              // check has
              if (!accum.find((t) => t.get('_id') === template.get('_id'))) accum.push(template);

              // return accum
              return accum;
            }, []);

            // categories
            this.update({
              templates,
            });
          });
        }
      }

      /**
       * on block
       */
      onBlock(e, block) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update block
        this.update({
          block,
        });
        this.reflowBlock();
      }

      /**
       * on remove
       */
      onRemove(e, removing) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // update block
        this.update({
          removing,
        });
        $(this.$('.modal')).modal('show');
      }

      /**
       * on remove
       */
      onCompleteRemove(e, removing) {
        // prevent default
        e.preventDefault();
        e.stopPropagation();

        // hide modal
        $(this.$('.modal')).modal('hide');

        // remove block
        this.update({
          block    : null,
          removing : null,
        });
        
        // filter
        this.state.data.routes[this.state.page].blocks = (this.state.data.routes[this.state.page].blocks || []).filter((b) => {
          // set id
          return b && b.id !== removing.id;
        }).sort((a, b) => {
          // sort
          if (a.order > b.order) return 1;
          if (a.order < b.order) return -1;
          return 0;
        }).map((item, i) => {
          // set order
          item.order = i;

          // item
          return item;
        });
        
        // save
        this.save();
        this.reflow();
      }

      /**
       * on child
       */
      onChild({ name, data }) {
        // update on mounted
        if (name === 'mounted') this.update({
          mounted : new Date(),
        });
      }

      /**
       * on move
       */
      onMove(e, way) {
        // log e
        e.preventDefault();
        e.stopPropagation();

        // get block
        const block = (this.state.data.routes[this.state.page].blocks || []).find((b) => b && b.id === this.state.block.id);
        const order = block.order || 0;

        // find original order
        const found = (this.state.data.routes[this.state.page].blocks || []).find((b) => b && (b.order || 0) === (order + way));

        // set order
        found.order = order;

        // check value
        block.order = order + way;

        // set order
        this.state.block.order = block.order;
        
        // save
        this.save();
        this.reflow();
      }

      // ////////////////////////////////////////////////////////////////////////////
      //
      // INIT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * init
       */
      async init() {
        // loading
        this.loading('repo', true);

        // add listener
        this.props.dashup.on('host.website', this.onChild);

        // check guest
        if (this.props.guest) await this.props.guest.building;

        // load distinct blocks
        const distinct = await this.props.guest.page('603f1c11e478ae000fe1e1e5').count('category', true);

        // call key
        const opts = await this.props.page.action('host', this.props.page.get('_id'));
        const data = await this.props.page.action('data', null);

        // update key
        this.update({
          ...opts,

          data,
          types : Object.keys(distinct).map((key) => {
            // blocks
            return {
              title : key,
              count : distinct[key],
            };
          }),
        });

        // reflow
        this.reflow();

        // loading
        this.loading('repo', false);
      }

      /**
       * save logic
       */
      save() {
        // save data
        return this.props.page.action('data', this.state.data);
      }

      /**
       * set body
       */
      async reflow(force) {
        // load body
        this.__body = !force && this.__body || await this.props.page.action('body');

        // blocks
        const blocks = [];
        const mounts = [];

        // loop blocks
        this.getBlocks().forEach(async ({ id, tmpl }) => {
          // push blocks
          blocks.push(`<div is="${id}"></div>`);
          mounts.push(`riot.register('${id}', new Function(riot.compileFromString(${JSON.stringify(tmpl.split('Logo').join(id))}).code.replace('export default', 'return'))());`);
        });

        // new body
        const newBody = this.__body.split('{BLOCKS}').join(blocks.join('')).split('{MOUNTS}').join(mounts.join(''));

        // set body
        $(this.$(`[ref="website"]`)).contents().find('body').html(`${newBody}`);
        $(this.$(`[ref="website"]`)).height($(this.$(`[ref="website"]`)).contents().find('html').prop('scrollHeight'));

        // init
        this.initSort();
      }

      /**
       * reflow block
       */
      reflowBlock() {
        // check block
        if (this.state.block && this.$(`[ref="block"]`)) {
          // set block
          const { id, tmpl } = this.state.block;

          // block body
          const blockBody = this.__body.split('{BLOCKS}').join(`<div is="${id}"></div>`).split('{MOUNTS}').join(`riot.register('${id}', new Function(riot.compileFromString(${JSON.stringify(tmpl.split('Logo').join(id))}).code.replace('export default', 'return'))());`);
          
          // to block
          $(this.$(`[ref="block"]`)).contents().find('body').html(`${blockBody}`);
        }
      }
        
      /**
       * init sort
       */
      initSort () {
        // sortables
        if (this.sortables) {
          // try/catch
          try {
            // destroy
            this.sortables.forEach((sortable) => sortable.destroy());
          } catch (e) {}
        }

        // sortables
        this.sortables = [];

        // old index
        let oldPrev = null;
        let oldIndex = 0;

        // start
        const start = (e) => {
          // add class
          this.dragging = true;

          // old index
          oldPrev = null;
          oldIndex = 0;

          // prev
          let prev = null;

          // loop physical fields
          let i = 0;
          e.from.childNodes.forEach((f) => {
            // check placement
            if (!f.getAttribute) return;
            if (f.getAttribute('style').includes('none')) return;

            // old index
            if ($(f).is(e.item)) {
              // set prev
              oldIndex = i;
              oldPrev = prev;
            }

            // set prev
            prev = f;

            // amend i
            i++;
          });
        };

        // end
        const end = async (e) => {
          // add class
          this.dragging = false;

          // expand
          const { item, to, from } = e;

          // set lets
          let create = $(from).is('.template-elements');
          let index, i = 0;

          // routes
          if (!this.state.data.blocks) this.state.data.blocks = {};
          if (!this.state.data.routes) this.state.data.routes = {};

          // check page
          if (!this.state.data.routes[this.state.page]) this.state.data.routes[this.state.page] = {};
          if (!this.state.data.routes[this.state.page].blocks) this.state.data.routes[this.state.page].blocks = [];

          // get template
          const template = item.getAttribute('data-template');

          // check template
          if (!$(to).is('.template-elements')) {
            // child nodes
            e.to.childNodes.forEach((f) => {
              // check placement
              if (!f.getAttribute) return;

              // old index
              if ($(f).is(item)) {
                // set prev
                index = i;
              }

              // get block
              const id = $(f).attr('data-id');

              // check id
              if (id) {
                // get block
                const found = this.state.data.routes[this.state.page].blocks.find((b) => b && b.id === id);

                // set order
                if (found) {
                  found.order = i;
                }
              }

              // amend i
              i++;
            });
          }
          
          // check remove
          if ($(item).attr('data-id') && $(to).is('.template-elements')) {
            // uuid
            const id = $(item).attr('data-id');
            
            // delete block
            delete this.state.data.blocks[id];
            this.state.data.routes[this.state.page].blocks = this.state.data.routes[this.state.page].blocks.filter((b) => b.id !== id);

            // reset for reorder
            if (!$(to).is(from)) {
              $(item).remove();
            } else if (oldIndex === 0) {
              // prepend to
              $(item).prependTo(from);
            } else {
              // find previous
              $(oldPrev).after(item);
            }

            // update
            return this.update();
          }

          // reset for reorder
          if (!$(to).is(from)) {
            $(item).remove();
          } else if (oldIndex === 0) {
            // prepend to
            $(item).prependTo(from);
          } else {
            // find previous
            $(oldPrev).after(item);
          }

          // check within template-elements
          if (create && $(to).is('.template-elements')) return this.reflow();

          // uuid
          const id = $(item).attr('data-id') || uuid();
          
          // found
          const actual = this.state.data.blocks[id] || {};
          const tmpl = (this.state.templates || []).find((t) => t.get('_id') === template);

          // create block
          this.state.data.blocks[id] = {
            id,
            tmpl  : actual.tmpl || (tmpl && tmpl.get('code')),
            title : actual.title || (tmpl && tmpl.get('title')),
          };
          
          // add to current page
          const found = this.state.data.routes[this.state.page].blocks.find((b) => b && b.id === id);

          // check found
          if (found) {
            // set order
            found.order = index;
          } else {
            // push block
            this.state.data.routes[this.state.page].blocks.push({
              id,
              order : index,
            });
          }

          // update
          this.update({
            data : this.state.data,
          });

          // reflow
          this.save();
          this.reflow();
        };

        // create sortables
        this.$$('.template-elements, .block-overlay').forEach((item) => {
          // push
          this.sortables.push(new Sortable(item, {
            group : {
              name : 'drag-elements',
              pull : 'clone',
            },
            onEnd             : end,
            onStart           : start,
            animation         : 200,
            fallbackOnBody    : true,
            removeCloneOnHide : false,
          }));
        });
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>

  <style>
    .op-50 {
      opacity : 50%;
    }
    iframe {
      height : 1px;
    }
    .block-body {
      position : relative;
    }
    .block-body > iframe {
      display : block;
    }
    .block-frame {
      z-index : 3;
      padding : .5rem;
    }
    .website-frame {
      transform        : scale(.75) translateX(16.5%);
      transform-origin : 0% 0%;
    }
    .block-hover {
      right    : 0;
      bottom   : 100%;
      position : absolute;
    }
    .block-body > .block-overlay {
      top        : 0;
      left       : 0;
      right      : 0;
      z-index    : 2;
      position   : absolute;
      min-height : 100%;
    }
    .block-body > .block-overlay > .block-wrapper:hover {
      background : var(--bs-primary-transparent);
    }
    .sortable-ghost {
      height        : 0!important;
      border        : 0!imporant;
      content       : '';
      outline       : .25rem solid var(--bs-primary)!important;
      overflow      : hidden;
      background    : var(--bs-primary);
      border-radius : 0!important;
    }
    .sortable-ghost > * {
      display : none!important;
    }
  </style>
</page-host-view>