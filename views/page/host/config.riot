<page-host-config>
  <div>
    <div if={ state.git } class="mb-3">
      <label class="form-label">
        Git Repo
      </label>
      <div class="mb-3">
        <input class="form-control" readonly="true" name="repo" value={ `https://${state.git}/${props.page.get('_id')}.git` } />
      </div>
    </div>
    <div if={ state.key } class="mb-3">
      <label class="form-label">
        Git Password
      </label>
      <input class="form-control" readonly="true" name="key" value={ state.key } />
    </div>
    <div if={ state.host } class="mb-3">
      <label class="form-label">
        Host Domain
      </label>
      <input class="form-control" readonly="true" name="key" value={ `https://${props.page.get('_id')}.${state.host}` } />
    </div>

    <div class="m-0">
      <label for="dist" class="form-label">
        Distribution Folder
      </label>
      <input class="form-control" name="dist" id="dist" onchange={ (e) => onDist(e) } type="text" value={ props.page.get('data.dist') || '' } />
    </div>
  </div>

  <script>
    // export default
    export default class DashupConfigHost {

      /**
       * on mounted
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // init
        this.init();
      }

      /**
       * on color
       */
      onDist(e) {
        // set color
        this.props.data('dist', e.target.value);
      }

      /**
       * init
       */
      async init() {
        // loading
        this.loading('repo', true);

        // call key
        const opts = await this.props.page.action('host', this.props.page.get('_id'));

        // update key
        this.update(opts);

        // loading
        this.loading('repo', false);
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // MISC METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-host-config>